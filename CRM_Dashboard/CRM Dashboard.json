[
    {
        "id": "9f253f41c116e4a3",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e0a8d8116ff8959a",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "",
        "url": "/supperAdmin",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "2b3ca9d0aeb3f6e8"
            ]
        ]
    },
    {
        "id": "573b8c83aa8cda5e",
        "type": "http response",
        "z": "9f253f41c116e4a3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "478ec016ab5dc107",
        "type": "template",
        "z": "9f253f41c116e4a3",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\" class=\"scroll-smooth\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Super Admin Dashboard</title>\n  <script src=\"https://cdn.tailwindcss.com\"></script>\n</head>\n<body class=\"bg-gray-100 min-h-screen flex flex-col\">\n\n  <header class=\"bg-indigo-600 text-white p-4\">\n    <h1 class=\"text-2xl font-bold\">Super Admin Dashboard</h1>\n  </header>\n\n  <main class=\"flex-grow container mx-auto p-4 max-w-7xl\">\n\n    <!-- LOGIN -->\n    <section id=\"login-section\" class=\"max-w-md mx-auto mt-16 bg-white p-6 rounded shadow\">\n      <h2 class=\"text-xl font-semibold mb-4\">Login</h2>\n      <form id=\"login-form\" class=\"space-y-4\">\n        <input\n          type=\"text\"\n          id=\"username\"\n          name=\"username\"\n          placeholder=\"Username\"\n          required\n          class=\"w-full border border-gray-300 p-2 rounded\"\n        />\n        <input\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          required\n          class=\"w-full border border-gray-300 p-2 rounded\"\n        />\n        <button\n          type=\"submit\"\n          class=\"w-full bg-indigo-600 text-white py-2 rounded hover:bg-indigo-700 transition\"\n        >Login</button>\n      </form>\n      <p id=\"login-error\" class=\"text-red-600 mt-2 hidden\"></p>\n    </section>\n\n    <!-- DASHBOARD -->\n    <section id=\"dashboard-section\" class=\"hidden\">\n\n      <nav class=\"flex space-x-4 border-b border-gray-300 mb-4\">\n        <button data-tab=\"roles\" class=\"tab-btn px-4 py-2 font-semibold border-b-2 border-indigo-600\">Roles</button>\n        <button data-tab=\"pages\" class=\"tab-btn px-4 py-2 font-semibold border-b-2 border-transparent hover:border-indigo-400\">Pages</button>\n        <button data-tab=\"users\" class=\"tab-btn px-4 py-2 font-semibold border-b-2 border-transparent hover:border-indigo-400\">Users</button>\n        <button id=\"logout-btn\" class=\"ml-auto px-4 py-2 font-semibold text-red-600 hover:underline\">Logout</button>\n      </nav>\n\n      <!-- Roles Tab -->\n      <div id=\"roles\" class=\"tab-content\">\n        <h2 class=\"text-xl font-semibold mb-4\">Manage Roles</h2>\n\n        <form id=\"add-role-form\" class=\"flex mb-4 space-x-2\">\n          <input type=\"text\" id=\"role-name\" placeholder=\"New Role Name\" required class=\"flex-grow border p-2 rounded\" />\n          <button type=\"submit\" class=\"bg-indigo-600 text-white px-4 rounded hover:bg-indigo-700 transition\">Add</button>\n        </form>\n\n        <table class=\"w-full border border-gray-300 rounded\">\n          <thead class=\"bg-indigo-50\">\n            <tr>\n              <th class=\"border px-3 py-2\">ID</th>\n              <th class=\"border px-3 py-2\">Role Name</th>\n              <th class=\"border px-3 py-2\">Actions</th>\n            </tr>\n          </thead>\n          <tbody id=\"roles-table-body\"></tbody>\n        </table>\n      </div>\n\n      <!-- Pages Tab -->\n      <div id=\"pages\" class=\"tab-content hidden\">\n        <h2 class=\"text-xl font-semibold mb-4\">Manage Pages</h2>\n\n        <form id=\"add-page-form\" class=\"flex mb-4 space-x-2\">\n          <input type=\"text\" id=\"page-name\" placeholder=\"Page Name\" required class=\"flex-grow border p-2 rounded\" />\n          <input type=\"text\" id=\"page-url\" placeholder=\"Page URL\" required class=\"flex-grow border p-2 rounded\" />\n          <button type=\"submit\" class=\"bg-indigo-600 text-white px-4 rounded hover:bg-indigo-700 transition\">Add</button>\n        </form>\n\n        <table class=\"w-full border border-gray-300 rounded\">\n          <thead class=\"bg-indigo-50\">\n            <tr>\n              <th class=\"border px-3 py-2\">ID</th>\n              <th class=\"border px-3 py-2\">Page Name</th>\n              <th class=\"border px-3 py-2\">URL</th>\n              <th class=\"border px-3 py-2\">Actions</th>\n            </tr>\n          </thead>\n          <tbody id=\"pages-table-body\"></tbody>\n        </table>\n      </div>\n\n      <!-- Users Tab -->\n      <div id=\"users\" class=\"tab-content hidden\">\n        <h2 class=\"text-xl font-semibold mb-4\">Manage Users</h2>\n\n        <form id=\"add-user-form\" class=\"flex mb-4 space-x-2 flex-wrap\">\n          <input type=\"text\" id=\"user-username\" placeholder=\"Username\" required class=\"flex-grow border p-2 rounded min-w-[150px]\" />\n          <input type=\"password\" id=\"user-password\" placeholder=\"Password\" required class=\"flex-grow border p-2 rounded min-w-[150px]\" />\n          <select id=\"user-role\" required class=\"border p-2 rounded min-w-[150px]\"></select>\n          <button type=\"submit\" class=\"bg-indigo-600 text-white px-4 rounded hover:bg-indigo-700 transition\">Add</button>\n        </form>\n\n        <table class=\"w-full border border-gray-300 rounded\">\n          <thead class=\"bg-indigo-50\">\n            <tr>\n              <th class=\"border px-3 py-2\">ID</th>\n              <th class=\"border px-3 py-2\">Username</th>\n              <th class=\"border px-3 py-2\">Role</th>\n              <th class=\"border px-3 py-2\">Actions</th>\n            </tr>\n          </thead>\n          <tbody id=\"users-table-body\"></tbody>\n        </table>\n      </div>\n\n    </section>\n\n  </main>\n\n  <script>\n    // API base URL (adjust if needed)\n    const API_BASE = '/api';\n\n    // Elements\n    const loginSection = document.getElementById('login-section');\n    const dashboardSection = document.getElementById('dashboard-section');\n    const loginForm = document.getElementById('login-form');\n    const loginError = document.getElementById('login-error');\n\n    const tabs = document.querySelectorAll('.tab-btn');\n    const tabContents = document.querySelectorAll('.tab-content');\n\n    // Role Tab\n    const rolesTableBody = document.getElementById('roles-table-body');\n    const addRoleForm = document.getElementById('add-role-form');\n    const roleNameInput = document.getElementById('role-name');\n\n    // Pages Tab\n    const pagesTableBody = document.getElementById('pages-table-body');\n    const addPageForm = document.getElementById('add-page-form');\n    const pageNameInput = document.getElementById('page-name');\n    const pageUrlInput = document.getElementById('page-url');\n\n    // Users Tab\n    const usersTableBody = document.getElementById('users-table-body');\n    const addUserForm = document.getElementById('add-user-form');\n    const userUsernameInput = document.getElementById('user-username');\n    const userPasswordInput = document.getElementById('user-password');\n    const userRoleSelect = document.getElementById('user-role');\n\n    const logoutBtn = document.getElementById('logout-btn');\n\n    let currentUser = null;\n    let rolesCache = [];\n\n    // Show error helper\n    function showError(element, msg) {\n      element.textContent = msg;\n      element.classList.remove('hidden');\n      setTimeout(() => element.classList.add('hidden'), 4000);\n    }\n\n    // Login handler\n    loginForm.addEventListener('submit', async e => {\n      e.preventDefault();\n      const username = loginForm.username.value.trim();\n      const password = loginForm.password.value;\n\n      if (!username || !password) {\n        showError(loginError, 'Please enter username and password');\n        return;\n      }\n\n      try {\n        const res = await fetch(`${API_BASE}/login`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ username, password }),\n        });\n        const data = await res.json();\n\n        if (!res.ok || !data.success) {\n          showError(loginError, data.message || 'Login failed');\n          return;\n        }\n\n        currentUser = data.user;\n\n        // Show dashboard & hide login\n        loginSection.classList.add('hidden');\n        dashboardSection.classList.remove('hidden');\n\n        // Load initial data\n        loadRoles();\n        loadPages();\n        loadUsers();\n\n        // Populate user role dropdown\n        populateUserRoleDropdown();\n\n        // Show default tab (Roles)\n        switchTab('roles');\n      } catch (err) {\n        showError(loginError, 'Error connecting to server');\n      }\n    });\n\n    // Logout\n    logoutBtn.addEventListener('click', () => {\n      currentUser = null;\n      loginForm.reset();\n      loginSection.classList.remove('hidden');\n      dashboardSection.classList.add('hidden');\n    });\n\n    // Tab switcher\n    tabs.forEach(tab => {\n      tab.addEventListener('click', () => switchTab(tab.dataset.tab));\n    });\n\n    function switchTab(tabName) {\n      tabs.forEach(t => {\n        t.classList.toggle('border-indigo-600', t.dataset.tab === tabName);\n        t.classList.toggle('border-transparent', t.dataset.tab !== tabName);\n      });\n      tabContents.forEach(tc => {\n        tc.classList.toggle('hidden', tc.id !== tabName);\n      });\n    }\n\n    // --- Roles ---\n    async function loadRoles() {\n      try {\n        const res = await fetch(`${API_BASE}/roles`);\n        const data = await res.json();\n        if (!res.ok) throw new Error(data.message || 'Failed to load roles');\n\n        rolesCache = data;\n\n        rolesTableBody.innerHTML = data\n          .map(\n            r =>\n              `<tr>\n                <td class=\"border px-3 py-1\">${r.id}</td>\n                <td class=\"border px-3 py-1\" data-id=\"${r.id}\" contenteditable=\"true\" class=\"editable\">${r.name}</td>\n                <td class=\"border px-3 py-1\">\n                  <button class=\"text-red-600 hover:underline\" onclick=\"deleteRole(${r.id})\">Delete</button>\n                </td>\n              </tr>`\n          )\n          .join('');\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n\n    addRoleForm.addEventListener('submit', async e => {\n      e.preventDefault();\n      const name = roleNameInput.value.trim();\n      if (!name) return alert('Role name is required');\n      try {\n        const res = await fetch(`${API_BASE}/roles`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ name }),\n        });\n        const data = await res.json();\n        if (!res.ok) throw new Error(data.message || 'Failed to add role');\n        roleNameInput.value = '';\n        loadRoles();\n      } catch (err) {\n        alert(err.message);\n      }\n    });\n\n    window.deleteRole = async function (id) {\n      if (!confirm('Delete this role?')) return;\n      try {\n        const res = await fetch(`${API_BASE}/roles/${id}`, { method: 'DELETE' });\n        if (!res.ok) throw new Error('Failed to delete role');\n        loadRoles();\n      } catch (err) {\n        alert(err.message);\n      }\n    };\n\n    // --- Pages ---\n    async function loadPages() {\n      try {\n        const res = await fetch(`${API_BASE}/pages`);\n        const data = await res.json();\n        if (!res.ok) throw new Error(data.message || 'Failed to load pages');\n\n        pagesTableBody.innerHTML = data\n          .map(\n            p =>\n              `<tr>\n                <td class=\"border px-3 py-1\">${p.id}</td>\n                <td class=\"border px-3 py-1\" contenteditable=\"true\" data-id=\"${p.id}\" data-field=\"name\">${p.name}</td>\n                <td class=\"border px-3 py-1\" contenteditable=\"true\" data-id=\"${p.id}\" data-field=\"url\">${p.url}</td>\n                <td class=\"border px-3 py-1\">\n                  <button class=\"text-red-600 hover:underline\" onclick=\"deletePage(${p.id})\">Delete</button>\n                </td>\n              </tr>`\n          )\n          .join('');\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n\n    addPageForm.addEventListener('submit', async e => {\n      e.preventDefault();\n      const name = pageNameInput.value.trim();\n      const url = pageUrlInput.value.trim();\n      if (!name || !url) return alert('Page name and URL required');\n      try {\n        const res = await fetch(`${API_BASE}/pages`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ name, url }),\n        });\n        const data = await res.json();\n        if (!res.ok) throw new Error(data.message || 'Failed to add page');\n        pageNameInput.value = '';\n        pageUrlInput.value = '';\n        loadPages();\n      } catch (err) {\n        alert(err.message);\n      }\n    });\n\n    window.deletePage = async function (id) {\n      if (!confirm('Delete this page?')) return;\n      try {\n        const res = await fetch(`${API_BASE}/pages/${id}`, { method: 'DELETE' });\n        if (!res.ok) throw new Error('Failed to delete page');\n        loadPages();\n      } catch (err) {\n        alert(err.message);\n      }\n    };\n\n    // --- Users ---\n    async function loadUsers() {\n      try {\n        const res = await fetch(`${API_BASE}/users`);\n        const data = await res.json();\n        if (!res.ok) throw new Error(data.message || 'Failed to load users');\n\n        usersTableBody.innerHTML = data\n          .map(\n            u =>\n              `<tr>\n                <td class=\"border px-3 py-1\">${u.id}</td>\n                <td class=\"border px-3 py-1\">${u.username}</td>\n                <td class=\"border px-3 py-1\">${u.role}</td>\n                <td class=\"border px-3 py-1\">\n                  <button class=\"text-red-600 hover:underline\" onclick=\"deleteUser(${u.id})\">Delete</button>\n                </td>\n              </tr>`\n          )\n          .join('');\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n\n    async function populateUserRoleDropdown() {\n      try {\n        const res = await fetch(`${API_BASE}/roles`);\n        const roles = await res.json();\n        if (!res.ok) throw new Error('Failed to fetch roles');\n        userRoleSelect.innerHTML = roles\n          .map(r => `<option value=\"${r.id}\">${r.name}</option>`)\n          .join('');\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n\n    addUserForm.addEventListener('submit', async e => {\n      e.preventDefault();\n      const username = userUsernameInput.value.trim();\n      const password = userPasswordInput.value;\n      const role_id = userRoleSelect.value;\n      if (!username || !password || !role_id) return alert('All fields are required');\n      try {\n        const res = await fetch(`${API_BASE}/users`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ username, password, role_id: Number(role_id) }),\n        });\n        const data = await res.json();\n        if (!res.ok) throw new Error(data.message || 'Failed to add user');\n        userUsernameInput.value = '';\n        userPasswordInput.value = '';\n        loadUsers();\n      } catch (err) {\n        alert(err.message);\n      }\n    });\n\n    window.deleteUser = async function (id) {\n      if (!confirm('Delete this user?')) return;\n      try {\n        const res = await fetch(`${API_BASE}/users/${id}`, { method: 'DELETE' });\n        if (!res.ok) throw new Error('Failed to delete user');\n        loadUsers();\n      } catch (err) {\n        alert(err.message);\n      }\n    };\n\n    // Init focus on username input\n    loginForm.username.focus();\n  </script>\n\n</body>\n</html>\n\n\n",
        "output": "str",
        "x": 480,
        "y": 140,
        "wires": [
            [
                "573b8c83aa8cda5e"
            ]
        ]
    },
    {
        "id": "5cadb29ccad639da",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Login",
        "url": "/api/login",
        "method": "post",
        "x": 170,
        "y": 880,
        "wires": [
            [
                "f4ec55ea98101013"
            ]
        ]
    },
    {
        "id": "f4ec55ea98101013",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Login SQL & check",
        "func": "const { username, password } = msg.payload || {};\nif (!username || !password) {\n    msg.statusCode = 400;\n    msg.payload = { success: false, message: \"Username and password required\" };\n    return msg;\n}\n\n// Simple escape function for single quotes (basic, improve if needed)\nfunction escapeSql(val) {\n    if (typeof val !== \"string\") return val;\n    return val.replace(/'/g, \"''\");\n}\n\nconst escapedUsername = escapeSql(username);\n\nmsg.topic = `SELECT u.id, u.username, u.password, r.id AS role_id, r.name AS role FROM users u JOIN roles r ON u.role_id = r.id WHERE u.username = '${escapedUsername}' LIMIT 1`;\nmsg.inputPassword = password;  // pass password down the flow for comparison\n\nreturn msg;\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 880,
        "wires": [
            [
                "7dab3633aa209fa5",
                "84cc64de9d4d3058"
            ],
            []
        ]
    },
    {
        "id": "7dab3633aa209fa5",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Login Query",
        "x": 570,
        "y": 880,
        "wires": [
            [
                "9fd3c1e33cb383ee",
                "473e9bb9ed0558d0"
            ]
        ]
    },
    {
        "id": "9fd3c1e33cb383ee",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Validate Login",
        "func": "if (!msg.payload || msg.payload.length === 0) {\n    msg.statusCode = 401;\n    msg.payload = { success: false, message: \"Invalid username or password\" };\n    return msg;\n}\n\nconst user = msg.payload[0];\n\nif (user.password !== msg.inputPassword) {\n    msg.statusCode = 401;\n    msg.payload = { success: false, message: \"Invalid username or password\" };\n    return msg;\n}\n\ndelete user.password;\n\nmsg.user = user; // Save user object, use in next node for role pages query\nmsg.topic = `SELECT p.id, p.name, p.url FROM pages p JOIN role_pages rp ON p.id = rp.page_id WHERE rp.role_id = ${user.role_id}`;\n// Note: Use stringInterpolation here carefully because this is coming from DB (safe). Or better still:\n\n// Safer way (if your MySQL node does not support msg.params):\n// msg.topic = `SELECT p.id, p.name, p.url FROM pages p JOIN role_pages rp ON p.id = rp.page_id WHERE rp.role_id = ${Number(user.role_id)}`;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 920,
        "wires": [
            [
                "a9aebc21a75da294",
                "40fc63a2f222d9ce"
            ]
        ]
    },
    {
        "id": "a9aebc21a75da294",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Role Pages",
        "x": 970,
        "y": 980,
        "wires": [
            [
                "5cbbd645d0f523f9",
                "e9f0d2fdc26a217d"
            ]
        ]
    },
    {
        "id": "5cbbd645d0f523f9",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Prepare Login Response",
        "func": "const pages = msg.payload || [];\nconst user = msg.user;\n\nmsg.statusCode = 200;\nmsg.payload = {\n  success: true,\n  user: {\n    id: user.id,\n    username: user.username,\n    role: user.role\n  },\n  pages: pages\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1080,
        "wires": [
            [
                "a25592be9d6e6294"
            ]
        ]
    },
    {
        "id": "f52f037d5f55f786",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Get Roles",
        "url": "/api/roles",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1560,
        "wires": [
            [
                "6c984de041b050b7"
            ]
        ]
    },
    {
        "id": "6c984de041b050b7",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Select Roles",
        "func": "msg.topic = `\nSELECT \n  r.id AS role_id, \n  r.name AS role_name, \n  p.id AS page_id, \n  p.name AS page_name\nFROM roles r\nLEFT JOIN role_pages rp ON r.id = rp.role_id\nLEFT JOIN pages p ON rp.page_id = p.id\nORDER BY r.id, p.id`;\n\nreturn msg;\n\n\n\n// // // msg.topic = 'SELECT * FROM roles';\n// // // return msg;\n\n// // msg.topic = `\n// // SELECT \n// //   r.id AS role_id, \n// //   r.name AS role_name, \n// //   p.id AS page_id, \n// //   p.name AS page_name\n// // FROM roles r\n// // LEFT JOIN role_pages rp ON r.id = rp.role_id\n// // LEFT JOIN pages p ON rp.page_id = p.id\n// // ORDER BY r.id`;\n// // return msg;\n\n// const input = msg.payload; // assuming the raw SQL result is in msg.payload\n\n// const grouped = [];\n\n// const map = new Map();\n\n// for (const item of input) {\n//   if (!map.has(item.role_id)) {\n//     map.set(item.role_id, {\n//       role_id: item.role_id,\n//       role_name: item.role_name,\n//       pages: []\n//     });\n//   }\n//   if (item.page_id && item.page_name) {\n//     map.get(item.role_id).pages.push({\n//       page_id: item.page_id,\n//       page_name: item.page_name\n//     });\n//   }\n// }\n\n// msg.payload = Array.from(map.values());\n// return msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1560,
        "wires": [
            [
                "1e5eb53827fc33ab"
            ]
        ]
    },
    {
        "id": "1e5eb53827fc33ab",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Roles",
        "x": 600,
        "y": 1560,
        "wires": [
            [
                "eacc77ebd071f837"
            ]
        ]
    },
    {
        "id": "d198cc1470702906",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Delete Role",
        "url": "/api/roles/:id",
        "method": "delete",
        "x": 310,
        "y": 1600,
        "wires": [
            [
                "481dec7ca071028a"
            ]
        ]
    },
    {
        "id": "481dec7ca071028a",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Delete Role SQL",
        "func": "const id = msg.req.params.id;\nmsg.topic = `DELETE FROM roles WHERE id=${id}`;\nreturn msg;",
        "outputs": 1,
        "x": 510,
        "y": 1600,
        "wires": [
            [
                "0be8c9029c18d658"
            ]
        ]
    },
    {
        "id": "0be8c9029c18d658",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Delete Role",
        "x": 720,
        "y": 1600,
        "wires": [
            [
                "a25592be9d6e6294"
            ]
        ]
    },
    {
        "id": "698531fcd2cf519a",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Get Pages",
        "url": "/api/pages",
        "method": "get",
        "x": 190,
        "y": 1240,
        "wires": [
            [
                "f0469c31f3a8b4c6"
            ]
        ]
    },
    {
        "id": "f0469c31f3a8b4c6",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Select Pages",
        "func": "msg.topic = 'SELECT * FROM pages';\nreturn msg;",
        "outputs": 1,
        "x": 390,
        "y": 1240,
        "wires": [
            [
                "412dac24760d6895"
            ]
        ]
    },
    {
        "id": "412dac24760d6895",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Pages",
        "x": 600,
        "y": 1240,
        "wires": [
            [
                "a25592be9d6e6294"
            ]
        ]
    },
    {
        "id": "cf0465d639edeb58",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Add Page",
        "url": "/api/pages",
        "method": "post",
        "x": 190,
        "y": 1280,
        "wires": [
            [
                "23f0fcba7a3cf3cc"
            ]
        ]
    },
    {
        "id": "23f0fcba7a3cf3cc",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Insert Page SQL",
        "func": "const { name, url } = msg.payload;\nif (!name || !url) { node.error('Page name and url required', msg); return null; }\nmsg.topic = `INSERT INTO pages (name, url) VALUES ('${name}', '${url}')`;\nreturn msg;",
        "outputs": 1,
        "x": 390,
        "y": 1280,
        "wires": [
            [
                "39ac3a2529da0453"
            ]
        ]
    },
    {
        "id": "39ac3a2529da0453",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Insert Page",
        "x": 600,
        "y": 1280,
        "wires": [
            [
                "a25592be9d6e6294"
            ]
        ]
    },
    {
        "id": "9f5338e6061e35ed",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Update Page",
        "url": "/api/pages/:id",
        "method": "put",
        "x": 190,
        "y": 1320,
        "wires": [
            [
                "d079f7f707cbd533"
            ]
        ]
    },
    {
        "id": "d079f7f707cbd533",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Update Page SQL",
        "func": "const id = msg.req.params.id;\nconst { name, url } = msg.payload;\nif (!name || !url) { node.error('Page name and url required', msg); return null; }\nmsg.topic = `UPDATE pages SET name='${name}', url='${url}' WHERE id=${id}`;\nreturn msg;",
        "outputs": 1,
        "x": 390,
        "y": 1320,
        "wires": [
            [
                "27ef1b08eee9025f"
            ]
        ]
    },
    {
        "id": "27ef1b08eee9025f",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Update Page",
        "x": 600,
        "y": 1320,
        "wires": [
            [
                "a25592be9d6e6294"
            ]
        ]
    },
    {
        "id": "85b1dc7aa944d0b9",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Delete Page",
        "url": "/api/pages/:id",
        "method": "delete",
        "x": 190,
        "y": 1360,
        "wires": [
            [
                "30e31f6547a20237"
            ]
        ]
    },
    {
        "id": "30e31f6547a20237",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Delete Page SQL",
        "func": "const id = msg.req.params.id;\nmsg.topic = `DELETE FROM pages WHERE id=${id}`;\nreturn msg;",
        "outputs": 1,
        "x": 390,
        "y": 1360,
        "wires": [
            [
                "bd5a70a0e06667ef"
            ]
        ]
    },
    {
        "id": "bd5a70a0e06667ef",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Delete Page",
        "x": 600,
        "y": 1360,
        "wires": [
            [
                "a25592be9d6e6294"
            ]
        ]
    },
    {
        "id": "23f996d03a99846e",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Get Role-Pages",
        "url": "/api/role_pages",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1440,
        "wires": [
            [
                "f39ca03b255b1be5"
            ]
        ]
    },
    {
        "id": "f39ca03b255b1be5",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Select Role-Pages",
        "func": "const roleId = msg.req.params.id;\n\nif (!roleId) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Role ID is required\" };\n    return msg;\n}\n\nmsg.topic = `\n    SELECT rp.page_id, p.name AS page_name\nFROM role_pages rp\nJOIN pages p ON rp.page_id = p.id\nWHERE rp.role_id = ?\n\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1440,
        "wires": [
            [
                "81da3f8aa981d1e3"
            ]
        ]
    },
    {
        "id": "81da3f8aa981d1e3",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Role-Pages",
        "x": 650,
        "y": 1440,
        "wires": [
            [
                "a25592be9d6e6294"
            ]
        ]
    },
    {
        "id": "83732a1e4b96a313",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Add Role-Page",
        "url": "/api/role_pages",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1480,
        "wires": [
            [
                "4773e5a6aa8032f7"
            ]
        ]
    },
    {
        "id": "4773e5a6aa8032f7",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Insert Role-Page SQL",
        "func": "// Expects: msg.payload = { name: \"Admin\", pages: [1,2,3] }\nmsg.roleName = msg.payload.name;\nmsg.pageIds = msg.payload.pages || [];\nmsg.topic = `INSERT INTO roles (name) VALUES ('${msg.roleName}')`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1480,
        "wires": [
            [
                "ba5b6b610a677ec6"
            ]
        ]
    },
    {
        "id": "ba5b6b610a677ec6",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Insert Role-Page",
        "x": 670,
        "y": 1480,
        "wires": [
            [
                "a25592be9d6e6294"
            ]
        ]
    },
    {
        "id": "f853f389b50e4095",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Delete Role-Page",
        "url": "/api/role_pages",
        "method": "delete",
        "x": 190,
        "y": 1520,
        "wires": [
            [
                "f01f05685ffbe9b5"
            ]
        ]
    },
    {
        "id": "f01f05685ffbe9b5",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Delete Role-Page SQL",
        "func": "const roleId = msg.req.params.id;\nconst pageId = msg.req.params.pageId;\n\nif (!roleId || !pageId) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Role ID and Page ID are required\" };\n    return msg;\n}\n\nmsg.topic = `DELETE FROM role_pages WHERE role_id = ${roleId} AND page_id = ${pageId}`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1520,
        "wires": [
            [
                "f61cc1eb8a64c7d0"
            ]
        ]
    },
    {
        "id": "f61cc1eb8a64c7d0",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Delete Role-Page",
        "x": 670,
        "y": 1520,
        "wires": [
            [
                "a25592be9d6e6294"
            ]
        ]
    },
    {
        "id": "4b1980259545e88f",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Get Users",
        "url": "/api/users",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 1140,
        "wires": [
            [
                "76373e097158854e"
            ]
        ]
    },
    {
        "id": "76373e097158854e",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Select Users with Role",
        "func": "// SQL to get users and their role names only\nmsg.topic = `\n  SELECT users.id, users.username, roles.name AS role\n  FROM users\n  JOIN roles ON users.role_id = roles.id\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1140,
        "wires": [
            [
                "97424709f1e54a05"
            ]
        ]
    },
    {
        "id": "97424709f1e54a05",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Users",
        "x": 630,
        "y": 1140,
        "wires": [
            [
                "a25592be9d6e6294"
            ]
        ]
    },
    {
        "id": "a25592be9d6e6294",
        "type": "http response",
        "z": "9f253f41c116e4a3",
        "name": "HTTP Response",
        "statusCode": "",
        "headers": {},
        "x": 1440,
        "y": 1320,
        "wires": []
    },
    {
        "id": "677ce8aa8bd00842",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "",
        "url": "/registerUser",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 870,
        "y": 120,
        "wires": [
            [
                "10f1da03050ff96f"
            ]
        ]
    },
    {
        "id": "6ec4eba255099b38",
        "type": "http response",
        "z": "9f253f41c116e4a3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 120,
        "wires": []
    },
    {
        "id": "10f1da03050ff96f",
        "type": "template",
        "z": "9f253f41c116e4a3",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\" class=\"scroll-smooth\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Register - Super Admin System</title>\n  <script src=\"https://cdn.tailwindcss.com\"></script>\n</head>\n<body class=\"bg-gray-100 min-h-screen flex items-center justify-center\">\n\n  <div class=\"bg-white p-8 rounded shadow max-w-md w-full\">\n    <h2 class=\"text-2xl font-bold mb-6 text-center\">Create New Account</h2>\n    <form id=\"registerForm\" class=\"space-y-4\">\n      <input\n        type=\"text\"\n        id=\"username\"\n        name=\"username\"\n        placeholder=\"Username\"\n        required\n        class=\"w-full p-2 border border-gray-300 rounded\"\n      />\n      <input\n        type=\"password\"\n        id=\"password\"\n        name=\"password\"\n        placeholder=\"Password\"\n        required\n        class=\"w-full p-2 border border-gray-300 rounded\"\n        minlength=\"6\"\n      />\n      <input\n        type=\"password\"\n        id=\"confirmPassword\"\n        name=\"confirmPassword\"\n        placeholder=\"Confirm Password\"\n        required\n        class=\"w-full p-2 border border-gray-300 rounded\"\n        minlength=\"6\"\n      />\n      <select\n        id=\"role\"\n        name=\"role\"\n        required\n        class=\"w-full p-2 border border-gray-300 rounded\"\n      >\n        <option value=\"\">Select Role</option>\n        <option value=\"Super Admin\">Super Admin</option>\n        <option value=\"User\">User</option>\n      </select>\n      <button\n        type=\"submit\"\n        class=\"w-full bg-indigo-600 text-white p-2 rounded hover:bg-indigo-700 transition\"\n      >\n        Register\n      </button>\n      <p id=\"registerError\" class=\"text-red-600 mt-2 hidden\"></p>\n      <p id=\"registerSuccess\" class=\"text-green-600 mt-2 hidden\"></p>\n    </form>\n  </div>\n\n  <script>\n    const registerForm = document.getElementById(\"registerForm\");\n    const registerError = document.getElementById(\"registerError\");\n    const registerSuccess = document.getElementById(\"registerSuccess\");\n\n    registerForm.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n      registerError.classList.add(\"hidden\");\n      registerSuccess.classList.add(\"hidden\");\n\n      const username = registerForm.username.value.trim();\n      const password = registerForm.password.value;\n      const confirmPassword = registerForm.confirmPassword.value;\n      const role = registerForm.role.value;\n\n      if (password !== confirmPassword) {\n        registerError.textContent = \"Passwords do not match.\";\n        registerError.classList.remove(\"hidden\");\n        return;\n      }\n\n      try {\n        const res = await fetch(\"/register_user\", {  // Change endpoint as per your Node-RED\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ username, password, role }),\n        });\n\n        const data = await res.json();\n\n        if (!res.ok) {\n          throw new Error(data.message || \"Registration failed\");\n        }\n\n        registerSuccess.textContent = \"Registration successful! You can now log in.\";\n        registerSuccess.classList.remove(\"hidden\");\n        registerForm.reset();\n\n      } catch (err) {\n        registerError.textContent = err.message;\n        registerError.classList.remove(\"hidden\");\n      }\n    });\n  </script>\n</body>\n</html>\n\n\n",
        "output": "str",
        "x": 1060,
        "y": 120,
        "wires": [
            [
                "6ec4eba255099b38"
            ]
        ]
    },
    {
        "id": "2b3ca9d0aeb3f6e8",
        "type": "template",
        "z": "9f253f41c116e4a3",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Admin Panel</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <script src=\"https://cdn.tailwindcss.com\"></script>\n</head>\n<body class=\"bg-green-50 text-gray-800\">\n\n  <!-- Login Form -->\n  <div id=\"loginForm\" class=\"min-h-screen flex items-center justify-center bg-green-100\">\n    <div class=\"bg-white p-8 rounded-xl shadow-md w-full max-w-sm\">\n      <h2 class=\"text-xl font-bold mb-4 text-green-700\">Login</h2>\n      <input id=\"username\" type=\"text\" placeholder=\"Username\" class=\"w-full mb-3 px-4 py-2 border rounded\" />\n      <input id=\"password\" type=\"password\" placeholder=\"Password\" class=\"w-full mb-3 px-4 py-2 border rounded\" />\n      <button onclick=\"login()\" class=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded w-full\">Login</button>\n    </div>\n  </div>\n\n  <!-- Admin Dashboard -->\n  <div id=\"dashboard\" class=\"hidden min-h-screen flex\">\n\n    <!-- Sidebar -->\n    <div class=\"w-64 bg-green-200 p-4 space-y-4 shadow-lg flex flex-col\">\n      <h2 class=\"text-2xl font-bold text-green-800 mb-6\">Admin Panel</h2>\n      <button onclick=\"showSection('roles')\" class=\"w-full text-left px-3 py-2 bg-green-300 rounded hover:bg-green-400\">Roles</button>\n      <button onclick=\"showSection('pages')\" class=\"w-full text-left px-3 py-2 bg-green-300 rounded hover:bg-green-400\">Pages</button>\n      <button onclick=\"showSection('users')\" class=\"w-full text-left px-3 py-2 bg-green-300 rounded hover:bg-green-400\">Users</button>\n      <button onclick=\"logout()\" class=\"mt-auto w-full text-left px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600\">Logout</button>\n    </div>\n\n    <!-- Main Content -->\n    <div class=\"flex-1 p-6 space-y-6 overflow-auto\">\n\n      <!-- ROLES -->\n      <section id=\"roles\" class=\"hidden max-w-5xl mx-auto\">\n        <h2 class=\"text-3xl font-bold mb-4 border-b border-green-400 pb-2\">Manage Roles</h2>\n        <form id=\"add-role-form\" class=\"flex space-x-3 mb-6 max-w-md\">\n          <input id=\"roleName\" placeholder=\"Role name\" required\n            class=\"flex-grow border border-gray-300 rounded px-3 py-2 focus:outline-green-500\" />\n          <button type=\"submit\" class=\"bg-green-600 text-white px-5 rounded hover:bg-green-700 transition duration-300\">Add Role</button>\n        </form>\n        <ul id=\"roleList\" class=\"space-y-2\"></ul>\n      </section>\n\n      <!-- PAGES -->\n      <section id=\"pages\" class=\"hidden max-w-5xl mx-auto\">\n        <h2 class=\"text-3xl font-bold mb-4 border-b border-green-400 pb-2\">Manage Pages</h2>\n        <form id=\"add-page-form\" class=\"flex space-x-3 mb-6 max-w-md\">\n          <input id=\"pageName\" placeholder=\"Page name\" required\n            class=\"flex-grow border border-gray-300 rounded px-3 py-2 focus:outline-green-500\" />\n          <input id=\"pageUrl\" placeholder=\"Page URL\" required\n            class=\"flex-grow border border-gray-300 rounded px-3 py-2 focus:outline-green-500\" />\n          <button type=\"submit\" class=\"bg-green-600 text-white px-5 rounded hover:bg-green-700 transition duration-300\">Add Page</button>\n        </form>\n\n        <table class=\"w-full max-w-6xl border border-gray-300 rounded text-left\">\n          <thead class=\"bg-green-100\">\n            <tr>\n              <th class=\"px-4 py-2 border-b border-green-300\">ID</th>\n              <th class=\"px-4 py-2 border-b border-green-300\">Page Name</th>\n              <th class=\"px-4 py-2 border-b border-green-300\">URL</th>\n              <th class=\"px-4 py-2 border-b border-green-300\">Actions</th>\n            </tr>\n          </thead>\n          <tbody id=\"pages-table-body\" class=\"bg-white\"></tbody>\n        </table>\n      </section>\n\n      <!-- USERS -->\n      <section id=\"users\" class=\"hidden max-w-6xl mx-auto\">\n        <h2 class=\"text-3xl font-bold mb-4 border-b border-green-400 pb-2\">Manage Users</h2>\n        <form id=\"add-user-form\" class=\"flex flex-col space-y-4 mb-6 max-w-5xl\">\n\n          <div class=\"flex flex-wrap space-x-3\">\n            <input id=\"user-username\" type=\"text\" placeholder=\"Username\" required\n              class=\"flex-grow min-w-[140px] border border-gray-300 rounded px-3 py-2 focus:outline-green-500\" />\n            <input id=\"user-password\" type=\"password\" placeholder=\"Password\"\n              class=\"flex-grow min-w-[140px] border border-gray-300 rounded px-3 py-2 focus:outline-green-500\" />\n            <select id=\"user-role\" required\n              class=\"border border-gray-300 rounded px-3 py-2 min-w-[140px] focus:outline-green-500\"></select>\n          </div>\n\n          <div>\n            <label class=\"block mb-1 font-semibold text-green-700\">Assign Pages:</label>\n            <div id=\"user-pages\"\n              class=\"flex flex-wrap gap-4 max-w-4xl border border-gray-300 rounded p-3 bg-white\"\n              style=\"max-height: 150px; overflow-y: auto;\">\n              <!-- Page checkboxes inserted here -->\n            </div>\n          </div>\n\n          <div class=\"flex space-x-3\">\n            <button type=\"submit\" id=\"userAddBtn\"\n              class=\"bg-green-600 text-white px-5 rounded hover:bg-green-700 transition duration-300\">Add User</button>\n            <button type=\"button\" id=\"userUpdateBtn\"\n              class=\"bg-yellow-500 text-white px-5 rounded hover:bg-yellow-600 transition duration-300 hidden\">Update User</button>\n            <button type=\"button\" id=\"userCancelBtn\"\n              class=\"bg-gray-400 text-white px-5 rounded hover:bg-gray-500 transition duration-300 hidden\">Cancel</button>\n          </div>\n        </form>\n\n        <table class=\"w-full max-w-6xl border border-gray-300 rounded text-left\">\n          <thead class=\"bg-green-100\">\n            <tr>\n              <th class=\"px-4 py-2 border-b border-green-300\">ID</th>\n              <th class=\"px-4 py-2 border-b border-green-300\">Username</th>\n              <th class=\"px-4 py-2 border-b border-green-300\">Role</th>\n              <th class=\"px-4 py-2 border-b border-green-300\">Pages Assigned</th>\n              <th class=\"px-4 py-2 border-b border-green-300\">Actions</th>\n            </tr>\n          </thead>\n          <tbody id=\"users-table-body\" class=\"bg-white\"></tbody>\n        </table>\n      </section>\n\n    </div>\n  </div>\n\n  <script>\n    const API_BASE = 'http://127.0.0.1:1880/api';\n\n    let allPages = [];\n    let editUserId = null;\n\n    // On load: check login\n    window.onload = () => {\n      if (localStorage.getItem('user')) {\n        showDashboard();\n      } else {\n        showLogin();\n      }\n    };\n\n    function showLogin() {\n      document.getElementById('loginForm').style.display = 'flex';\n      document.getElementById('dashboard').classList.add('hidden');\n    }\n\n    function showDashboard() {\n      document.getElementById('loginForm').style.display = 'none';\n      document.getElementById('dashboard').classList.remove('hidden');\n      showSection('roles');\n      loadRoles();\n      loadPages();\n      loadUsers();\n    }\n\n    // LOGIN\n    async function login() {\n      const username = document.getElementById('username').value.trim();\n      const password = document.getElementById('password').value.trim();\n\n      if (!username || !password) {\n        alert('Please fill all fields');\n        return;\n      }\n\n      try {\n        const res = await fetch(`${API_BASE}/login`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ username, password })\n        });\n        const data = await res.json();\n        if (!res.ok || !data.success) throw new Error(data.message || 'Login failed');\n\n        localStorage.setItem('user', JSON.stringify(data));\n        showDashboard();\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n\n    function logout() {\n      localStorage.removeItem('user');\n      showLogin();\n      clearUserForm();\n    }\n\n    // SHOW SECTION\n    function showSection(sectionId) {\n      ['roles', 'pages', 'users'].forEach(id => {\n        document.getElementById(id).style.display = id === sectionId ? 'block' : 'none';\n      });\n    }\n\n    // -------- ROLES --------\n    async function loadRoles() {\n      try {\n        const res = await fetch(`${API_BASE}/roles`);\n        if (!res.ok) throw new Error('Failed to load roles');\n        const roles = await res.json();\n\n        const list = document.getElementById('roleList');\n        list.innerHTML = '';\n        roles.forEach(r => {\n          const li = document.createElement('li');\n          li.className = 'bg-white p-3 rounded shadow flex justify-between items-center';\n\n          li.innerHTML = `\n            <span>${escapeHtml(r.name)}</span>\n            <button onclick=\"deleteRole(${r.id})\" class=\"text-red-600 hover:underline\">Delete</button>\n          `;\n          list.appendChild(li);\n        });\n\n        // Also populate user-role select\n        const roleSelect = document.getElementById('user-role');\n        roleSelect.innerHTML = '<option value=\"\">Select role</option>';\n        roles.forEach(r => {\n          const option = document.createElement('option');\n          option.value = r.id;\n          option.textContent = r.name;\n          roleSelect.appendChild(option);\n        });\n\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n\n    async function addRole(e) {\n      e.preventDefault();\n      const name = document.getElementById('roleName').value.trim();\n      if (!name) return alert('Role name required');\n\n      try {\n        const res = await fetch(`${API_BASE}/roles`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ name })\n        });\n        if (!res.ok) throw new Error('Failed to add role');\n        document.getElementById('roleName').value = '';\n        loadRoles();\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n\n    async function deleteRole(id) {\n      if (!confirm('Delete role?')) return;\n      try {\n        const res = await fetch(`${API_BASE}/roles/${id}`, { method: 'DELETE' });\n        if (!res.ok) throw new Error('Failed to delete role');\n        loadRoles();\n        loadUsers(); // reload users to reflect role changes\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n\n    document.getElementById('add-role-form').addEventListener('submit', addRole);\n\n    // -------- PAGES --------\n    async function loadPages() {\n      try {\n        const res = await fetch(`${API_BASE}/pages`);\n        if (!res.ok) throw new Error('Failed to load pages');\n        const pages = await res.json();\n\n        allPages = pages;\n\n        // Render pages table\n        const tbody = document.getElementById('pages-table-body');\n        tbody.innerHTML = '';\n        pages.forEach(p => {\n          const tr = document.createElement('tr');\n          tr.innerHTML = `\n            <td class=\"border px-4 py-2\">${p.id}</td>\n            <td class=\"border px-4 py-2\">${escapeHtml(p.name)}</td>\n            <td class=\"border px-4 py-2\">${escapeHtml(p.url)}</td>\n            <td class=\"border px-4 py-2\">\n              <button onclick=\"deletePage(${p.id})\" class=\"text-red-600 hover:underline\">Delete</button>\n            </td>\n          `;\n          tbody.appendChild(tr);\n        });\n\n        // Render pages checkboxes in user form\n        renderPageCheckboxes();\n\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n\n    async function addPage(e) {\n      e.preventDefault();\n      const name = document.getElementById('pageName').value.trim();\n      const url = document.getElementById('pageUrl').value.trim();\n      if (!name || !url) return alert('Page name and URL required');\n\n      try {\n        const res = await fetch(`${API_BASE}/pages`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ name, url })\n        });\n        if (!res.ok) throw new Error('Failed to add page');\n        document.getElementById('pageName').value = '';\n        document.getElementById('pageUrl').value = '';\n        loadPages();\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n\n    async function deletePage(id) {\n      if (!confirm('Delete page?')) return;\n      try {\n        const res = await fetch(`${API_BASE}/pages/${id}`, { method: 'DELETE' });\n        if (!res.ok) throw new Error('Failed to delete page');\n        loadPages();\n        loadUsers(); // reload users to reflect page changes\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n\n    document.getElementById('add-page-form').addEventListener('submit', addPage);\n\n    // Render page checkboxes for user assign\n    function renderPageCheckboxes() {\n      const container = document.getElementById('user-pages');\n      container.innerHTML = '';\n      allPages.forEach(page => {\n        const checkboxId = `page-checkbox-${page.id}`;\n        const label = document.createElement('label');\n        label.className = 'inline-flex items-center space-x-2 cursor-pointer select-none';\n\n        label.innerHTML = `\n          <input type=\"checkbox\" id=\"${checkboxId}\" name=\"userPages\" value=\"${page.id}\" class=\"rounded border-gray-300 text-green-600 focus:ring-green-500\" />\n          <span>${escapeHtml(page.name)}</span>\n        `;\n\n        container.appendChild(label);\n      });\n    }\n\n    // -------- USERS --------\n    async function loadUsers() {\n      try {\n        const res = await fetch(`${API_BASE}/users`);\n        if (!res.ok) throw new Error('Failed to load users');\n        const users = await res.json();\n\n        const tbody = document.getElementById('users-table-body');\n        tbody.innerHTML = '';\n\n        users.forEach(u => {\n          // u.pages expected as array of objects {id, name}\n          const pagesNames = u.pages?.map(p => p.name).join(', ') || '';\n\n          const tr = document.createElement('tr');\n          tr.innerHTML = `\n            <td class=\"border px-4 py-2\">${u.id}</td>\n            <td class=\"border px-4 py-2\">${escapeHtml(u.username)}</td>\n            <td class=\"border px-4 py-2\">${escapeHtml(u.role)}</td>\n            <td class=\"border px-4 py-2\">${escapeHtml(pagesNames)}</td>\n            <td class=\"border px-4 py-2 space-x-2\">\n              <button onclick=\"startEditUser(${u.id}, '${escapeJs(u.username)}', ${u.role_id}, ${JSON.stringify(u.pages)})\" class=\"text-yellow-600 hover:underline\">Edit</button>\n              <button onclick=\"deleteUser(${u.id})\" class=\"text-red-600 hover:underline\">Delete</button>\n            </td>\n          `;\n          tbody.appendChild(tr);\n        });\n\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n\n    function clearUserForm() {\n      document.getElementById('user-username').value = '';\n      document.getElementById('user-password').value = '';\n      document.getElementById('user-role').value = '';\n      setSelectedPageIds([]);\n      editUserId = null;\n      toggleUserButtons(false);\n    }\n\n    function toggleUserButtons(editing) {\n      document.getElementById('userAddBtn').style.display = editing ? 'none' : 'inline-block';\n      document.getElementById('userUpdateBtn').style.display = editing ? 'inline-block' : 'none';\n      document.getElementById('userCancelBtn').style.display = editing ? 'inline-block' : 'none';\n    }\n\n    // Escape for JS string inside ' '\n    function escapeJs(str) {\n      return str.replace(/'/g, \"\\\\'\").replace(/\"/g, '\\\\\"');\n    }\n\n    // Escape HTML for text content\n    function escapeHtml(text) {\n      if (!text) return '';\n      return text.replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n    }\n\n    // User add/update handlers\n    document.getElementById('add-user-form').addEventListener('submit', addUser);\n    document.getElementById('userUpdateBtn').addEventListener('click', updateUser);\n    document.getElementById('userCancelBtn').addEventListener('click', cancelUserEdit);\n\n    async function addUser(e) {\n      e.preventDefault();\n      if (editUserId) return;\n\n      const username = document.getElementById('user-username').value.trim();\n      const password = document.getElementById('user-password').value.trim();\n      const role_id = document.getElementById('user-role').value;\n      const page_ids = getSelectedPageIds();\n\n      if (!username || !password || !role_id) {\n        alert('Please fill username, password and role');\n        return;\n      }\n\n      try {\n        const res = await fetch(`${API_BASE}/users`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ username, password, role_id, page_ids })\n        });\n        if (!res.ok) throw new Error('Failed to add user');\n        clearUserForm();\n        loadUsers();\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n\n    function getSelectedPageIds() {\n      const checkedBoxes = [...document.querySelectorAll('#user-pages input[type=checkbox]:checked')];\n      return checkedBoxes.map(cb => parseInt(cb.value));\n    }\n\n    function setSelectedPageIds(selectedPages) {\n      const selectedIds = selectedPages.map(p => (typeof p === 'object' ? p.id : p));\n      const checkboxes = document.querySelectorAll('#user-pages input[type=checkbox]');\n      checkboxes.forEach(cb => {\n        cb.checked = selectedIds.includes(parseInt(cb.value));\n      });\n    }\n\n    function startEditUser(id, username, role_id, pages) {\n      editUserId = id;\n      document.getElementById('user-username').value = username;\n      document.getElementById('user-password').value = '';\n      document.getElementById('user-role').value = role_id;\n\n      setSelectedPageIds(pages || []);\n\n      toggleUserButtons(true);\n      showSection('users');\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n\n    async function updateUser() {\n      if (!editUserId) return;\n\n      const username = document.getElementById('user-username').value.trim();\n      const password = document.getElementById('user-password').value.trim();\n      const role_id = document.getElementById('user-role').value;\n      const page_ids = getSelectedPageIds();\n\n      if (!username || !role_id) {\n        alert('Username and role required');\n        return;\n      }\n\n      try {\n        const body = { username, role_id, page_ids };\n        if (password) body.password = password;\n\n        const res = await fetch(`${API_BASE}/users/${editUserId}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(body)\n        });\n        if (!res.ok) throw new Error('Failed to update user');\n\n        cancelUserEdit();\n        loadUsers();\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n\n    function cancelUserEdit() {\n      clearUserForm();\n    }\n\n    async function deleteUser(id) {\n      if (!confirm('Delete user?')) return;\n      try {\n        const res = await fetch(`${API_BASE}/users/${id}`, { method: 'DELETE' });\n        if (!res.ok) throw new Error('Failed to delete user');\n        loadUsers();\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n  </script>\n</body>\n</html>\n\n\n",
        "output": "str",
        "x": 480,
        "y": 100,
        "wires": [
            [
                "573b8c83aa8cda5e"
            ]
        ]
    },
    {
        "id": "f4acdd4a7c64843f",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Insert Role",
        "url": "/api/roles",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1660,
        "wires": [
            [
                "4d2e6a46fd473fa9"
            ]
        ]
    },
    {
        "id": "4d2e6a46fd473fa9",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Validate + Check Role Exists",
        "func": "const { name, pageIds } = msg.payload;\nif (!name || !Array.isArray(pageIds)) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Name and pageIds[] are required\" };\n    return [msg, null];\n}\n\nmsg.roleName = name.trim();\nmsg.pageIds = pageIds;\nmsg.topic = `SELECT COUNT(*) AS count FROM roles WHERE name = '${msg.roleName}'`;\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "x": 360,
        "y": 1660,
        "wires": [
            [
                "df1b1b74d1c0162c"
            ],
            [
                "df1b1b74d1c0162c"
            ]
        ]
    },
    {
        "id": "df1b1b74d1c0162c",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Query",
        "x": 600,
        "y": 1660,
        "wires": [
            [
                "b4e7c4e420af23c2"
            ]
        ]
    },
    {
        "id": "b4e7c4e420af23c2",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Check Duplicate + Insert Role",
        "func": "const count = msg.payload[0]?.count || 0;\n\nif (count > 0) {\n    msg.statusCode = 409;\n    msg.payload = { error: 'Role name already exists' };\n    return [msg, null];\n}\n\nmsg.topic = `INSERT INTO roles (name) VALUES ('${msg.roleName}')`;\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "x": 830,
        "y": 1660,
        "wires": [
            [
                "a4f18f8919f041d3"
            ],
            [
                "fd16bc07327c31b1"
            ]
        ]
    },
    {
        "id": "a4f18f8919f041d3",
        "type": "http response",
        "z": "9f253f41c116e4a3",
        "name": "Duplicate Role Response",
        "statusCode": "",
        "headers": {},
        "x": 1060,
        "y": 1620,
        "wires": []
    },
    {
        "id": "fd16bc07327c31b1",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "Insert Role",
        "x": 1050,
        "y": 1680,
        "wires": [
            [
                "a3a0909b406b5c24"
            ]
        ]
    },
    {
        "id": "a3a0909b406b5c24",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Insert Role Pages",
        "func": "const insertId = msg.payload.insertId;\nconst pages = msg.pageIds;\n\nif (!pages || !pages.length) {\n  msg.payload = {\n    success: true,\n    message: \"Role inserted without pages\",\n    insertId\n  };\n  return msg;\n}\n\nconst values = pages.map(id => `(${insertId}, ${id})`).join(\",\");\nmsg.topic = `INSERT INTO role_pages (role_id, page_id) VALUES ${values}`;\nmsg.insertId = insertId;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1260,
        "y": 1680,
        "wires": [
            [
                "ef94ea72658bb760"
            ]
        ]
    },
    {
        "id": "ef94ea72658bb760",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "Insert RolePages",
        "x": 1450,
        "y": 1680,
        "wires": [
            [
                "cb8b4ae91aa84ef3"
            ]
        ]
    },
    {
        "id": "cb8b4ae91aa84ef3",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Insert Success Response",
        "func": "msg.payload = {\n    success: true,\n    message: \"Role and pages inserted successfully\",\n    insertId: msg.insertId\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1670,
        "y": 1680,
        "wires": [
            [
                "f7aeec102f2ab103"
            ]
        ]
    },
    {
        "id": "2c2633f7c5b478f3",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Update Role",
        "url": "/api/roles/:id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1860,
        "wires": [
            [
                "63e88226bd54e96b"
            ]
        ]
    },
    {
        "id": "63e88226bd54e96b",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Prepare Update SQL",
        "func": "const roleId = msg.req.params.id;\nconst { name, pageIds } = msg.payload;\n\nif (!roleId || !name || !Array.isArray(pageIds)) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Role id, name and pageIds required\" };\n    return null;\n}\n\nmsg.roleId = roleId;\nmsg.pageIds = pageIds;\nmsg.topic = `UPDATE roles SET name = '${name}' WHERE id = ${roleId}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 1860,
        "wires": [
            [
                "f06d6d57a7bdf06d"
            ]
        ]
    },
    {
        "id": "f06d6d57a7bdf06d",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "Update Role",
        "x": 590,
        "y": 1860,
        "wires": [
            [
                "3c2e6df104eb1578"
            ]
        ]
    },
    {
        "id": "3c2e6df104eb1578",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Delete Old Pages",
        "func": "msg.topic = `DELETE FROM role_pages WHERE role_id = ${msg.roleId}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 790,
        "y": 1860,
        "wires": [
            [
                "edce31edaf711b0b"
            ]
        ]
    },
    {
        "id": "edce31edaf711b0b",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "Delete Pages",
        "x": 990,
        "y": 1860,
        "wires": [
            [
                "d39f9887c0f1e0f7"
            ]
        ]
    },
    {
        "id": "d39f9887c0f1e0f7",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Insert Updated Pages",
        "func": "const roleId = msg.roleId;\nconst pages = msg.pageIds;\n\nif (!pages.length) {\n    msg.payload = {\n        success: true,\n        message: \"Role updated with no pages\"\n    };\n    return msg;\n}\n\nconst values = pages.map(id => `(${roleId}, ${id})`).join(\",\");\nmsg.topic = `INSERT INTO role_pages (role_id, page_id) VALUES ${values}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1200,
        "y": 1860,
        "wires": [
            [
                "3001a9ce8c0ef9ec"
            ]
        ]
    },
    {
        "id": "3001a9ce8c0ef9ec",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "Insert Pages (Update)",
        "x": 1400,
        "y": 1860,
        "wires": [
            [
                "d412b24483f42959"
            ]
        ]
    },
    {
        "id": "d412b24483f42959",
        "type": "http response",
        "z": "9f253f41c116e4a3",
        "name": "Update Done",
        "statusCode": "",
        "headers": {},
        "x": 1600,
        "y": 1860,
        "wires": []
    },
    {
        "id": "f7aeec102f2ab103",
        "type": "http response",
        "z": "9f253f41c116e4a3",
        "name": "Insert Done",
        "statusCode": "",
        "headers": {},
        "x": 1870,
        "y": 1680,
        "wires": []
    },
    {
        "id": "daab9c89f6840d83",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Add User",
        "url": "/api/users",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1740,
        "y": 980,
        "wires": [
            [
                "ebcc636c3af81f51"
            ]
        ]
    },
    {
        "id": "ebcc636c3af81f51",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Insert User SQL",
        "func": "const { username, password, role_id } = msg.payload;\n\nif (!username || !password || !role_id) {\n  node.error(\"Missing required fields\", msg);\n  return null;\n}\n\nmsg.topic = `INSERT INTO users (username, password, role_id) VALUES (?, ?, ?)`;\nmsg.payload = [username, password, role_id];\n\nreturn msg;\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 980,
        "wires": [
            [
                "72454d5e582a5914",
                "b7a58bb93d3e9c51"
            ],
            [
                "f7570cac8d8c6afa",
                "baa12f855f48bd13"
            ]
        ]
    },
    {
        "id": "72454d5e582a5914",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Insert User",
        "x": 2150,
        "y": 980,
        "wires": [
            [
                "f7570cac8d8c6afa"
            ]
        ]
    },
    {
        "id": "c74fd1bd99b6fadf",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Update User",
        "url": "/api/users/:id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1750,
        "y": 1080,
        "wires": [
            [
                "5a644c176fcd7d7d"
            ]
        ]
    },
    {
        "id": "5a644c176fcd7d7d",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Update User SQL",
        "func": "const id = msg.req.params.id;\nconst { username, password, role_id } = msg.payload;\n\nif (!username || !role_id) {\n    msg.statusCode = 400;\n    msg.payload = { error: 'username and role_id are required' };\n    return [null, msg];\n}\n\nlet fields = ['username=?', 'role_id=?'];\nlet params = [username, role_id];\n\nif (password && password.length > 0) {\n    fields.push(`password=?`);\n    params.push(password);\n}\n\nmsg.topic = `UPDATE users SET ${fields.join(', ')} WHERE id=?`;\nparams.push(id);\nmsg.params = params;\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1080,
        "wires": [
            [
                "3cf1e3d9034b623a",
                "c2e3ba46b5020e5b"
            ],
            [
                "f7570cac8d8c6afa"
            ]
        ]
    },
    {
        "id": "3cf1e3d9034b623a",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Update User",
        "x": 2220,
        "y": 1060,
        "wires": [
            [
                "f7570cac8d8c6afa"
            ]
        ]
    },
    {
        "id": "2b8ace64a21778e8",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "Delete User",
        "url": "/api/users/:id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 1750,
        "y": 1140,
        "wires": [
            [
                "f93307533d6075b4"
            ]
        ]
    },
    {
        "id": "f93307533d6075b4",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "Delete User SQL",
        "func": "const id = msg.req.params.id;\nmsg.topic = `DELETE FROM users WHERE id = ?`;\nmsg.params = [id];\nreturn msg;",
        "outputs": 1,
        "x": 1950,
        "y": 1140,
        "wires": [
            [
                "6e3576ead1ce376f"
            ]
        ]
    },
    {
        "id": "6e3576ead1ce376f",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Delete User",
        "x": 2160,
        "y": 1140,
        "wires": [
            [
                "f7570cac8d8c6afa"
            ]
        ]
    },
    {
        "id": "f7570cac8d8c6afa",
        "type": "http response",
        "z": "9f253f41c116e4a3",
        "name": "HTTP Response",
        "statusCode": "",
        "headers": {},
        "x": 2540,
        "y": 960,
        "wires": []
    },
    {
        "id": "b7a58bb93d3e9c51",
        "type": "debug",
        "z": "9f253f41c116e4a3",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 820,
        "wires": []
    },
    {
        "id": "baa12f855f48bd13",
        "type": "debug",
        "z": "9f253f41c116e4a3",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 1040,
        "wires": []
    },
    {
        "id": "get_pages",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "d": true,
        "name": "GET /api/pages",
        "url": "/api/pages",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2840,
        "y": 1180,
        "wires": [
            [
                "query_pages"
            ]
        ]
    },
    {
        "id": "query_pages",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "d": true,
        "name": "SELECT pages",
        "func": "msg.topic = \"SELECT id, name FROM pages ORDER BY name\";\nreturn msg;",
        "outputs": 1,
        "x": 3020,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "get_menus",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "GET /menus",
        "url": "/menus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2820,
        "y": 1240,
        "wires": [
            [
                "query_menus"
            ]
        ]
    },
    {
        "id": "query_menus",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "SELECT menus",
        "func": "msg.topic = `\nSELECT m.id, m.title, m.type, m.page_id, p.name AS page_name ,p.url\nFROM menus m \nJOIN pages p ON m.page_id = p.id\nORDER BY m.id DESC`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3020,
        "y": 1240,
        "wires": [
            [
                "7b2a73053bc1462b"
            ]
        ]
    },
    {
        "id": "get_menu_by_id",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "GET /menus/:id",
        "url": "/menus/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2830,
        "y": 1300,
        "wires": [
            [
                "query_menu_by_id"
            ]
        ]
    },
    {
        "id": "query_menu_by_id",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "SELECT menu by ID",
        "func": "const id = msg.req.params.id;\nmsg.topic = `SELECT * FROM menus WHERE id = ${id}`;\nreturn msg;",
        "outputs": 1,
        "x": 3050,
        "y": 1300,
        "wires": [
            [
                "7b2a73053bc1462b"
            ]
        ]
    },
    {
        "id": "post_menu",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "POST /menus",
        "url": "/menus",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2810,
        "y": 1360,
        "wires": [
            [
                "insert_menu"
            ]
        ]
    },
    {
        "id": "insert_menu",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "INSERT menu",
        "func": "const { title, type, page_id } = msg.payload;\nmsg.topic = `INSERT INTO menus (title, type, page_id) VALUES ('${title}', '${type}', ${page_id})`;\nreturn msg;",
        "outputs": 1,
        "x": 3040,
        "y": 1360,
        "wires": [
            [
                "7b2a73053bc1462b"
            ]
        ]
    },
    {
        "id": "put_menu",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "PUT /menus/:id",
        "url": "/menus/:id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 2820,
        "y": 1420,
        "wires": [
            [
                "update_menu"
            ]
        ]
    },
    {
        "id": "update_menu",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "UPDATE menu",
        "func": "const id = msg.req.params.id;\nconst { title, type, page_id } = msg.payload;\nmsg.topic = `UPDATE menus SET title='${title}', type='${type}', page_id=${page_id} WHERE id=${id}`;\nreturn msg;",
        "outputs": 1,
        "x": 3040,
        "y": 1420,
        "wires": [
            [
                "7b2a73053bc1462b"
            ]
        ]
    },
    {
        "id": "delete_menu",
        "type": "http in",
        "z": "9f253f41c116e4a3",
        "name": "DELETE /menus/:id",
        "url": "/menus/:id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 2830,
        "y": 1480,
        "wires": [
            [
                "remove_menu"
            ]
        ]
    },
    {
        "id": "remove_menu",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "DELETE menu",
        "func": "const id = msg.req.params.id;\nmsg.topic = `DELETE FROM menus WHERE id = ${id}`;\nreturn msg;",
        "outputs": 1,
        "x": 3040,
        "y": 1480,
        "wires": [
            [
                "7b2a73053bc1462b"
            ]
        ]
    },
    {
        "id": "7b2a73053bc1462b",
        "type": "mysql",
        "z": "9f253f41c116e4a3",
        "mydb": "79c1eb4f3b9a2123",
        "name": "MySQL Delete User",
        "x": 3340,
        "y": 1360,
        "wires": [
            [
                "467ca386dd7462b8"
            ]
        ]
    },
    {
        "id": "473e9bb9ed0558d0",
        "type": "debug",
        "z": "9f253f41c116e4a3",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 820,
        "wires": []
    },
    {
        "id": "40fc63a2f222d9ce",
        "type": "debug",
        "z": "9f253f41c116e4a3",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 860,
        "wires": []
    },
    {
        "id": "e9f0d2fdc26a217d",
        "type": "debug",
        "z": "9f253f41c116e4a3",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 960,
        "wires": []
    },
    {
        "id": "84cc64de9d4d3058",
        "type": "debug",
        "z": "9f253f41c116e4a3",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 820,
        "wires": []
    },
    {
        "id": "467ca386dd7462b8",
        "type": "http response",
        "z": "9f253f41c116e4a3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 3550,
        "y": 1360,
        "wires": []
    },
    {
        "id": "eacc77ebd071f837",
        "type": "function",
        "z": "9f253f41c116e4a3",
        "name": "function 30",
        "func": "const input = Array.isArray(msg.payload) ? msg.payload : [];\n\nconst map = new Map();\n\nfor (const item of input) {\n  if (!map.has(item.role_id)) {\n    map.set(item.role_id, {\n      role_id: item.role_id,\n      role_name: item.role_name,\n      pages: []\n    });\n  }\n\n  if (item.page_id && item.page_name) {\n    map.get(item.role_id).pages.push({\n      page_id: item.page_id,\n      page_name: item.page_name\n    });\n  }\n}\n\nmsg.payload = Array.from(map.values());\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1560,
        "wires": [
            [
                "a25592be9d6e6294"
            ]
        ]
    },
    {
        "id": "c2e3ba46b5020e5b",
        "type": "debug",
        "z": "9f253f41c116e4a3",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2100,
        "y": 1240,
        "wires": []
    },
    {
        "id": "79c1eb4f3b9a2123",
        "type": "MySQLdatabase",
        "name": "master",
        "host": "localhost",
        "port": "3306",
        "db": "master",
        "tz": "",
        "charset": "UTF8"
    }
]